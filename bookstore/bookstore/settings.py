"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import datetime
import logging
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'uy&3zzq%mjw4f+d!fyw56i#-zxm95fjn90o1^w66!9i*!cu^=k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'django_crontab',
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片模块
    'apps.users.apps.UsersConfig',
    'apps.users_options.apps.UsersOptionsConfig',
    'apps.goods.apps.GoodsConfig',
    'apps.trade.apps.TradeConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'bookstore',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'root',
        # 'ATOMIC_REQUESTS': True     # 事务的全局开启
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'   # 指定存储方式为混合存储
SESSION_CACHE_ALIAS = 'session'     # 指定session使用的默认缓存库


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = 'static'
#
# MEDIA_URL = '/media/'
# MEDIA_ROOT = 'media'

# 日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "log/esbook.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}
# CORS
CORS_ORIGIN_WHITELIST = (
    'http://192.168.1.4',
    'http://192.168.232.128',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

AUTH_USER_MODEL = 'users.UserProfile'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# JWT
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    # 'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}

# Celery    异步消息队列
# https://www.celerycn.io/ru-men/celery-jian-jie   # celery中文文档

# admin管理站点曾经的王者->xadmin
# 在django2.1之后的版本就不再支持xadmin的使用
# 替代品：simpleui，tyadmin（配置很麻烦，NJS环境，配置好之后还需要修改tyadmin底层代码的配置参数）

SIMPLEUI_LOGO = 'http://192.168.1.183:8000/static/logo/logo.png'    # 指定logo图片
SIMPLEUI_HOME_INFO = False      # 关闭广告链接

# 作业：将所有模型注册到admin页面中，注意要使用simpleui
# 把logo替换成自己喜欢的图片

ACCESS_KEY_ID = "LTAI5tC4tgasYviV4rBMUMdd"  # 用户的ID，此处为阿里云创建的子用户的ID
ACCESS_KEY_SECRET = "CMaaZCAm2YXAY0olmcC0M6kfeSri1q"    # 相当于密码，加密盐
END_POINT = "oss-cn-beijing.aliyuncs.com"
PREFIX_URL = 'http://'  # 协议头
BUCKET_NAME = "django07lq"     # 使用创建的bucket的名称
ALIYUN_OSS_CNAME = ""  # 自定义域名，如果不需要可以不填写
BUCKET_ACL_TYPE = "public-read"  # private, public-read, public-read-write
DEFAULT_FILE_STORAGE = 'aliyun_oss2_storage.backends.AliyunMediaStorage'    # 此参数表示上传的文件要存放的路径，云存储的路径
STATICFILES_STORAGE = 'aliyun_oss2_storage.backends.AliyunStaticStorage'    # 静态文件的存放路径
MEDIA_URL = '/media/'
MEDIA_ROOT = 'media'
STATIC_URL = '/static/'
STATIC_ROOT = 'static'

# 安装阿里云存储所需要的依赖包
# pip install django-aliyun-oss2-storage
# 访问格式
# BUCKET_NAME+DEFAULT_FILE_STORAGE+路径
# BUCKET_NAME.DEFAULT_FILE_STORAGE/static/logo/logo.jpg

# 富文本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        'height': 300,  # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图片保存路径，如果使用了云存储服务，则此处值为空即可


# alipay
# 以下参数用于支付时支付宝开发平台的验证
ALIPAY_APPID = '2021000117685876'
app_private_key_string = open(os.path.join(BASE_DIR, 'apps/trade/keys/app_private_key.pem'), 'r').read()
alipay_public_key_string = open(os.path.join(BASE_DIR, 'apps/trade/keys/alipay_public_key.pem'), 'r').read()
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'   # 请求的支付宝平台的接口
ALIPAY_RETURN_URL = 'http://192.168.1.183'   # 支付完成后返回的页面

# 定时任务配置
CRONJOBS = [ # 每5分钟执行一次生成主页静态文件
    ('*/1 * * * *', 'goods.cron.generate_static_index', '>> /home/shilin/Book_Store/bookstore/log/crontab.log')]
# 解决中文异常问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
